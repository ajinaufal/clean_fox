import 'dart:io';

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:internet_connection_checker/internet_connection_checker.dart';
import 'package:dartz/dartz.dart';
import 'package:{{project_name}}/core/data/data.dart';
import 'package:{{project_name}}/core/domain/domain.dart';
import 'package:{{project_name}}/core/helpers/network_helper.dart';
import 'package:{{project_name}}/core/services/api_services.dart';

class ProductRepositoriesImpl implements ProductRepositories {
  ProductRepositoriesImpl({
    required this.networkInfo,
    required this.remoteDataSource,
  });

  final NetworkInfo networkInfo;
  final ProductRemoteDataSource remoteDataSource;

  @override
  Future<Either<Failure, ListProductEntity>> getProduct() async {
    if (await networkInfo.isConnected) {
      try {
        final resp = await remoteDataSource.getProduct();
        return Right(resp);
      } on SocketException {
        return const Left(SocketFailure());
      } catch (_) {
        return const Left(ServerFailure());
      }
    }
    return const Left(NetworkFailure());
  }
}

final productRepositoryProvider = Provider.autoDispose<ProductRepositories>(
  (ref) {
    ref.onDispose(() {});
    return ProductRepositoriesImpl(
      remoteDataSource:  ProductRemoteDataSourceImpl(apiService: ApiService()),
      networkInfo: NetworkInfoImpl(
        dataConnectionChecker: InternetConnectionChecker(),
      ),
    );
  },
);
